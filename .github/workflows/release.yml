name: Release a qGuard

on:
  push:
    tags:
      - "v*"

env:
  PRIVATE_PYPI_URL: https://google.com

jobs:
  create-release:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout qGuard Repository
      uses: actions/checkout@v3

    - name: Set up Python
      id: setup-python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12.6"
    - name: Set up uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        export PATH="${PATH}:${HOME}/.cargo/bin"
        echo "${HOME}/.cargo/bin" >> "${GITHUB_PATH}"
        uv --version
    - name: Set up uv's Python version
      run: |
        uv python install "$(python --version | cut -d\  -f 2)"
    - name: Load dependencies if venv cache hit
      id: load-deps
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/uv.lock') }}
    - name: Install dependencies if venv cache miss
      if: steps.load-deps.outputs.cache-hit != 'true'
      run: uv sync
    - name: Print Python version
      run: |
        echo "Calling python directly:"
        python --version
        python -c "import sys; print(sys.version)"
        echo
        echo "Calling python via uv:"
        uv run python --version
        uv run python -c "import sys; print(sys.version)"
    
    - name: Build
      id: build
      run: |
        uv add build
        uv run python -m build
    # - name: Publish
    #   env:
    #     TWINE_USERNAME: username
    #     TWINE_PASSWORD: password
    #   run: |
    #     uv add twine
    #     twine upload --repository-url $PRIVATE_PYPI_URL dist/*



    - name: Install Conventional Changelog
      run: npm install -g conventional-changelog-cli
    - name: Generate changelog
      run: |
        conventional-changelog -p conventionalcommits -i CHANGELOG.md -s -r 1
        echo "Changelog generated."

    - name: Create GitHub Release
      uses: actions/create-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        body_path: CHANGELOG.md
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Attach Python package to release
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: dist/*.tar.gz # Adjust to match your built module
        asset_name: qguard-${{ github.ref_name }}.tar.gz
        asset_content_type: application/gzip
