name: Release a qGuard

on:
  push:
    tags:
      - "v*"

env:
  QGUARD_PYPI_URL: ${{ secrets.PYPI_URL }}
  QGUARD_PYPI_ACCOUNT: ${{ secrets.PYPI_ACCOUNT }}
  QGUARD_PYPI_KEY: ${{ secrets.PYPI_KEY }}
  PYTHON_VERSION: "3.12.6"

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout qGuard repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{env.PYTHON_VERSION}}
        
    - name: Set up uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        export PATH="${PATH}:${HOME}/.cargo/bin"
        echo "${HOME}/.cargo/bin" >> "${GITHUB_PATH}"
        uv --version
        
    - name: Set up uv's Python version
      run: |
        uv python install "$(python --version | cut -d\  -f 2)"

    - name: Install dependencies
      run: uv sync
    
    - name: Build qGuard distribution artefact
      id: build
      run: |
        uv add build
        uv run python -m build
        echo "::set-output name=tar_filename::$(ls dist/*.tar.gz | head -n 1)"
    
    - name: Publish the distribution artefact to the PyPi
      env:
        TWINE_USERNAME: ${{env.QGUARD_PYPI_ACCOUNT}}
        TWINE_PASSWORD: ${{env.QGUARD_PYPI_KEY}}
      run: |
        uv add twine
        uv run python -m twine upload --repository-url $QGUARD_PYPI_URL dist/*

    - name: Generate a release changelog
      uses: orhun/git-cliff-action@v4
      id: git-cliff
      with:
        config: .github/workflows/release.cliff.toml
        args: --verbose --current
      env:
          OUTPUT: CHANGELOG.md

    - name: Create a GitHub release
      id: create_release
      uses: actions/create-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        release_name: ${{ github.ref_name }}
        body_path: CHANGELOG.md
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Upload qGuard distribution artefact to the release
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ steps.build.outputs.tar_filename }}
        asset_name: qguard-${{ github.ref_name }}.tar.gz
        asset_content_type: application/gzip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
